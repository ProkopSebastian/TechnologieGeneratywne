import json
import openai
from typing import List, Dict, Any
import time
from pathlib import Path
import os
import sys

class ProductKeywordsEnhancer:
    def __init__(self, api_key: str):
        """
        Agent LLM do dodawania angielskich s≈Ç√≥w kluczowych do produkt√≥w Biedronki
        """
        self.client = openai.OpenAI(api_key=api_key)
        
    def create_batch_prompt(self, products: List[Dict]) -> str:
        """
        Tworzy sprytny prompt dla wielu produkt√≥w naraz - oszczƒôdno≈õƒá token√≥w
        """
        # WyciƒÖgamy tylko nazwy produkt√≥w
        product_names = [p['name'] for p in products]
        
        prompt = f"""Dodaj angielskie s≈Çowa kluczowe dla produkt√≥w spo≈ºywczych z polskiej sieci Biedronka.

PRODUKTY:
{chr(10).join([f"{i+1}. {name}" for i, name in enumerate(product_names)])}

ZADANIE: Dla ka≈ºdego produktu podaj 3-5 angielskich s≈Ç√≥w kluczowych kt√≥re pomogƒÖ w wyszukiwaniu przepis√≥w.

FORMAT ODPOWIEDZI (JSON):
{{
  "keywords": [
    ["sausage", "meat", "pork", "deli"],
    ["bread", "bakery", "wheat", "loaf"],
    ...
  ]
}}

ZASADY:
- U≈ºywaj podstawowych angielskich nazw sk≈Çadnik√≥w
- Skupiaj siƒô na kategoriach jedzenia (meat, dairy, vegetables, etc.)
- Unikaj marek i szczeg√≥≈Ç√≥w - tylko typy jedzenia
- Odpowiedz TYLKO JSON, bez dodatkowych komentarzy"""
        
        return prompt
    
    def get_keywords_batch(self, products: List[Dict]) -> List[List[str]]:
        """
        Pobiera s≈Çowa kluczowe dla grupy produkt√≥w w jednym zapytaniu
        """
        prompt = self.create_batch_prompt(products)
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Jeste≈õ ekspertem od sk≈Çadnik√≥w spo≈ºywczych. Odpowiadasz TYLKO w formacie JSON."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,
                max_tokens=800
            )
            
            result = json.loads(response.choices[0].message.content)
            return result["keywords"]
            
        except Exception as e:
            print(f"B≈ÇƒÖd API: {e}")
            # Fallback - puste s≈Çowa kluczowe
            return [[] for _ in products]
    
    def enhance_products_file(self, input_file: str, output_file: str = None, batch_size: int = 10):
        """
        G≈Ç√≥wna funkcja - wczytuje JSON, dodaje keywords, zapisuje
        """
        # Sprawd≈∫ czy plik wej≈õciowy istnieje
        if not Path(input_file).exists():
            print(f"‚ùå Plik wej≈õciowy nie istnieje: {input_file}")
            return None
        
        # Wczytaj dane
        try:
            with open(input_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd wczytywania pliku: {e}")
            return None
        
        if 'products' not in data:
            print("‚ùå Brak klucza 'products' w danych")
            return None
        
        products = data['products']
        total_products = len(products)
        
        if total_products == 0:
            print("‚ö†Ô∏è Brak produkt√≥w do przetworzenia")
            return input_file
        
        print(f"üîÑ Przetwarzanie {total_products} produkt√≥w w batchach po {batch_size}...")
        
        # Przetwarzaj w batchach
        processed = 0
        for i in range(0, total_products, batch_size):
            batch = products[i:i+batch_size]
            batch_num = i//batch_size + 1
            batch_end = min(i+batch_size, total_products)
            
            print(f"üì¶ Batch {batch_num}: produkty {i+1}-{batch_end}")
            
            # Pobierz keywords dla batcha
            keywords_list = self.get_keywords_batch(batch)
            
            # Dodaj keywords do produkt√≥w
            for j, keywords in enumerate(keywords_list):
                if i+j < len(products):
                    products[i+j]['english_keywords'] = keywords
                    processed += 1
            
            print(f"   ‚úÖ Przetworzono {len(keywords_list)} produkt√≥w")
            
            # Kr√≥tka pauza ≈ºeby nie spamowaƒá API
            if i + batch_size < total_products:  # Nie czekaj po ostatnim batchu
                time.sleep(1)
        
        # Zapisz wynik
        if output_file is None:
            output_file = input_file.replace('.json', '_enhanced.json')
        
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ Zapisano {processed} rozszerzonych produkt√≥w do: {output_file}")
            return output_file
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd zapisu pliku: {e}")
            return None

def main():
    """G≈Ç√≥wna funkcja uruchamiajƒÖca enhancement"""
    print("ü§ñ Uruchamiam LLM Enhancer dla produkt√≥w Biedronki...")
    
    # Pobierz API key
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå Brak OPENAI_API_KEY w zmiennych ≈õrodowiskowych")
        sys.exit(1)
    
    # ≈öcie≈ºki plik√≥w
    input_file = "/shared/biedronka_offers.json"
    output_file = "/shared/biedronka_offers_enhanced.json"
    
    # Sprawd≈∫ czy plik wej≈õciowy istnieje
    if not Path(input_file).exists():
        print(f"‚ùå Plik wej≈õciowy nie istnieje: {input_file}")
        sys.exit(1)
    
    # Utw√≥rz enhancer i uruchom
    try:
        enhancer = ProductKeywordsEnhancer(api_key)
        result = enhancer.enhance_products_file(
            input_file=input_file,
            output_file=output_file,
            batch_size=8  # Mniejsze batche = mniej b≈Çƒôd√≥w API
        )
        
        if result:
            print("üéâ Enhancement zako≈Ñczony pomy≈õlnie!")
            
            # Poka≈º przyk≈Çad rezultatu
            with open(result, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            enhanced_count = sum(1 for p in data['products'] if 'english_keywords' in p and p['english_keywords'])
            print(f"üìä Statystyki: {enhanced_count}/{len(data['products'])} produkt√≥w ma keywords")
            
            # Poka≈º kilka przyk≈Çad√≥w
            print("\nüéØ PRZYK≈ÅADY REZULTAT√ìW:")
            examples = [p for p in data['products'] if 'english_keywords' in p and p['english_keywords']][:3]
            for product in examples:
                print(f"‚Ä¢ {product['name']} ‚Üí {', '.join(product['english_keywords'])}")
        else:
            print("‚ùå Enhancement nie powi√≥d≈Ç siƒô")
            sys.exit(1)
            
    except Exception as e:
        print(f"üí• Nieoczekiwany b≈ÇƒÖd: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()